import Foundation


/* MARK #1
Написать функцию, которая определяет, четное число или нет. */

func isEven (checkNumber number: Int) -> Bool {
    return number % 2 == 0
}

assert(isEven(checkNumber: 14))
assert(!isEven(checkNumber: 13))

// ==================================================================================================================

/* MARK #2
 Написать функцию, которая определяет, делится ли число без
 остатка на 3. */

func isDividedByThree (checkNumber number: Int) -> Bool {
    return number % 3 == 0
}

assert(isDividedByThree(checkNumber: 9))
assert(!isDividedByThree(checkNumber: 8))

// ==================================================================================================================

/* MARK #3
Создать возрастающий массив из 100 чисел. */

func createArr (lengthArray length: Int) -> [Int] {
    return [Int](1...length)
}

assert(createArr(lengthArray: 100).max()==100)
assert(createArr(lengthArray: 100).min()==1)

// ==================================================================================================================

/* MARK #4
 Удалить из этого массива все четные числа и все числа, которые не делятся на 3. */

var array: [Int] = createArr(lengthArray: 100)
var index = 0

var arrayWithFilters = array.filter({ (val: Int) -> Bool in
    return (!isEven(checkNumber:val) && !isDividedByThree(checkNumber: val))
 })
    
print (arrayWithFilters) /* [1, 5, 7, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37, 41, 43, 47, 49, 53, 55, 59, 61, 65, 67, 71, 73, 77, 79, 83, 85, 89, 91, 95, 97] */

// ==================================================================================================================

/* MARK #5
 Написать функцию, которая добавляет в массив новое число
 Фибоначчи, и добавить при помощи нее 100 элементов. */

func fibo(n: Decimal) -> [Decimal] {

    assert(n > 1)

    var array: [Decimal] = [0,1]

    while  array.count <  Int(truncating: n as NSNumber) {
        array.append(array[array.count - 1] + array[array.count - 2])
    }
    return  array
}

print(fibo(n: 100)) /* [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415121876738, 19740274219868223167, 31940434634990099905, 51680708854858323072, 83621143489848422977, 135301852344706746049, 218922995834555169026] */

// ==================================================================================================================

/* MARK #6
 Заполнить массив из 100 элементов различными простыми числами.
 Натуральное число, большее единицы, называется простым, если оно
 делится только на себя и на единицу. */

var arrayErathosphen: [Int] = []
var number = 2
let numberArrayElem = 100

while arrayErathosphen.count <= numberArrayElem {
    
    if (isPrime(checkNumber: number)) {
        arrayErathosphen.append(number)
    }
    number += 1
}

func isPrime (checkNumber num: Int)-> Bool{
    for i in 2 ..< num {
        if num % i == 0 {
            return false
        }
    }
return true
}


print(arrayErathosphen) /* [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547] */
